{
  "version": "2.0.1",
  "extensions": {
    "BuiltInExtension": [
      {
        "name": "debug",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable debug mode"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable debug mode, false to disable debug mode"
          }
        ],
        "examples": [
          "debug(true);"
        ]
      },
      {
        "name": "eval",
        "is_arbitrary": false,
        "desc": [
          "This is used to evaluate a string as code.",
          "This will not inherit imports that are in the parent script"
        ],
        "params": [
          {
            "name": "code",
            "type": "String",
            "desc": "the code to evaluate"
          }
        ],
        "returns": {
          "type": "Object",
          "desc": "the result of the evaluation"
        },
        "examples": [
          "eval('1 + 1');"
        ]
      },
      {
        "name": "experimental",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable experimental mode"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable experimental mode, false to disable experimental mode"
          }
        ],
        "examples": [
          "experimental(true);"
        ]
      },
      {
        "name": "getArucasVersion",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the version of Arucas that is currently running"
        ],
        "returns": {
          "type": "String",
          "desc": "the version of Arucas that is currently running"
        },
        "examples": [
          "getArucasVersion();"
        ]
      },
      {
        "name": "getDate",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current date formatted with dd/MM/yyyy in your local time"
        ],
        "returns": {
          "type": "String",
          "desc": "the current date formatted with dd/MM/yyyy"
        },
        "examples": [
          "getDate();"
        ]
      },
      {
        "name": "getMilliTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in milliseconds"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in milliseconds"
        },
        "examples": [
          "getMilliTime();"
        ]
      },
      {
        "name": "getNanoTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in nanoseconds"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in nanoseconds"
        },
        "examples": [
          "getNanoTime();"
        ]
      },
      {
        "name": "getTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time formatted with HH:mm:ss in your local time"
        ],
        "returns": {
          "type": "String",
          "desc": "the current time formatted with HH:mm:ss"
        },
        "examples": [
          "getTime();"
        ]
      },
      {
        "name": "getUnixTime",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the current time in seconds since the Unix epoch"
        ],
        "returns": {
          "type": "Number",
          "desc": "the current time in seconds since the Unix epoch"
        },
        "examples": [
          "getUnixTime();"
        ]
      },
      {
        "name": "input",
        "is_arbitrary": false,
        "desc": [
          "This is used to take an input from the user"
        ],
        "params": [
          {
            "name": "prompt",
            "type": "String",
            "desc": "the prompt to show the user"
          }
        ],
        "returns": {
          "type": "String",
          "desc": "the input from the user"
        },
        "examples": [
          "input('What is your name?');"
        ]
      },
      {
        "name": "isMain",
        "is_arbitrary": false,
        "desc": [
          "This is used to check whether the script is the main script"
        ],
        "returns": {
          "type": "Boolean",
          "desc": "true if the script is the main script, false if it is not"
        },
        "examples": [
          "isMain();"
        ]
      },
      {
        "name": "len",
        "is_arbitrary": false,
        "desc": [
          "This is used to get the length of a collection or string"
        ],
        "params": [
          {
            "name": "sizable",
            "type": "String",
            "desc": "the collection or string"
          }
        ],
        "examples": [
          "len(\"Hello World\");"
        ]
      },
      {
        "name": "print",
        "is_arbitrary": false,
        "desc": [
          "This prints a value to the output handler"
        ],
        "params": [
          {
            "name": "printValue",
            "type": "Object",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "print('Hello World');"
        ]
      },
      {
        "name": "print",
        "is_arbitrary": true,
        "desc": [
          "This prints a number of values to the console",
          "If there are no arguments then this will print a new line,",
          "other wise it will print the contents without a new line"
        ],
        "params": [
          {
            "name": "printValue...",
            "type": "Object",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "print('Hello World', 'This is a test', 123);"
        ]
      },
      {
        "name": "printDebug",
        "is_arbitrary": false,
        "desc": [
          "This logs something to the debug output.",
          "It only prints if debug mode is enabled: `debug(true)`"
        ],
        "params": [
          {
            "name": "printValue",
            "type": "Object",
            "desc": "the value to print"
          }
        ],
        "examples": [
          "debug(true); // Enable debug for testing\nif (true) {\n    printDebug(\"Inside if statement\");\n}"
        ]
      },
      {
        "name": "random",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a random integer between 0 and the bound"
        ],
        "params": [
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Number",
          "desc": "the random integer"
        },
        "examples": [
          "random(10);"
        ]
      },
      {
        "name": "range",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a range of integers starting from 0, incrementing by 1"
        ],
        "params": [
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Iterable",
          "desc": "an iterable object that returns the range of integers"
        },
        "examples": [
          "range(10);"
        ]
      },
      {
        "name": "range",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a range of numbers starting",
          "from a start value and ending at a bound value incrementing by 1"
        ],
        "params": [
          {
            "name": "start",
            "type": "Number",
            "desc": "the start value"
          },
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          }
        ],
        "returns": {
          "type": "Iterable",
          "desc": "an iterable object that returns the range of integers"
        },
        "examples": [
          "range(0, 10);"
        ]
      },
      {
        "name": "range",
        "is_arbitrary": false,
        "desc": [
          "This is used to generate a range of numbers starting from a",
          "start value and ending at a bound value incrementing by a step value"
        ],
        "params": [
          {
            "name": "start",
            "type": "Number",
            "desc": "the start value"
          },
          {
            "name": "bound",
            "type": "Number",
            "desc": "the maximum bound (exclusive)"
          },
          {
            "name": "step",
            "type": "Number",
            "desc": "the step value"
          }
        ],
        "returns": {
          "type": "Iterable",
          "desc": "an iterable object that returns the range of integers"
        },
        "examples": [
          "range(0, 10, 2);"
        ]
      },
      {
        "name": "run",
        "is_arbitrary": false,
        "desc": [
          "This is used to run a .arucas file, you can use on script to run other scripts"
        ],
        "params": [
          {
            "name": "path",
            "type": "String",
            "desc": "as a file path"
          }
        ],
        "returns": {
          "type": "Object",
          "desc": "any value that the file returns"
        },
        "examples": [
          "run('/home/user/script.arucas');"
        ]
      },
      {
        "name": "runFromString",
        "is_arbitrary": false,
        "deprecated": [
          "This should be replaced with 'eval(code)'"
        ],
        "desc": [
          "This is used to evaluate a string as code.",
          "This will not inherit imports that are in the parent script"
        ],
        "params": [
          {
            "name": "code",
            "type": "String",
            "desc": "the code to run"
          }
        ],
        "examples": [
          "runFromString('print(\"Hello World\");');"
        ]
      },
      {
        "name": "sleep",
        "is_arbitrary": false,
        "desc": [
          "This pauses your program for a certain amount of milliseconds"
        ],
        "params": [
          {
            "name": "milliseconds",
            "type": "Number",
            "desc": "milliseconds to sleep"
          }
        ],
        "examples": [
          "sleep(1000);"
        ]
      },
      {
        "name": "stop",
        "is_arbitrary": false,
        "desc": [
          "This is used to stop a script"
        ],
        "examples": [
          "stop();"
        ]
      },
      {
        "name": "suppressDeprecated",
        "is_arbitrary": false,
        "desc": [
          "This is used to enable or disable suppressing deprecation warnings"
        ],
        "params": [
          {
            "name": "bool",
            "type": "Boolean",
            "desc": "true to enable, false to disable warnings"
          }
        ],
        "examples": [
          "suppressDeprecated(true);"
        ]
      }
    ]
  },
  "classes": {
    "Boolean": {
      "name": "Boolean",
      "desc": [
        "This is the boolean type, representing either true or false.",
        "This class cannot be instantiated, or extended"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Collection": {
      "name": "Collection",
      "desc": [
        "This class is used to represent a collection of objects,",
        "this class is used internally as the parent of maps, lists, and sets.",
        "This cannot be instantiated directly.",
        "All collections inherit Iterable, and thus can be iterated over"
      ],
      "import_path": null,
      "superclass": "Iterable",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a collection, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildCollection: Collection {\n    ChildCollection(): super();\n    \n    fun size() {\n        return 0;\n    }\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "isEmpty",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the collection is empty"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the collection is empty"
          },
          "examples": [
            "['object', 81, 96, 'case'].isEmpty(); // false"
          ]
        },
        {
          "name": "size",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the size of the collection"
          ],
          "returns": {
            "type": "Number",
            "desc": "the size of the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].size();"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordAttachment": {
      "name": "DiscordAttachment",
      "desc": [
        "This class lets you download and manipulate discord attachments."
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getFileExtension",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the file extension of the attachment"
          ],
          "returns": {
            "type": "String",
            "desc": "the file extension of the attachment"
          },
          "examples": [
            "attachment.getFileExtension()"
          ]
        },
        {
          "name": "getFileName",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the file name of the attachment"
          ],
          "returns": {
            "type": "String",
            "desc": "the file name of the attachment"
          },
          "examples": [
            "attachment.getFileName()"
          ]
        },
        {
          "name": "getSize",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the size of the attachment"
          ],
          "returns": {
            "type": "Number",
            "desc": "the size of the attachment in bytes"
          },
          "examples": [
            "attachment.getSize()"
          ]
        },
        {
          "name": "getUrl",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the url of the attachment"
          ],
          "returns": {
            "type": "String",
            "desc": "the url of the attachment"
          },
          "examples": [
            "attachment.getUrl()"
          ]
        },
        {
          "name": "isImage",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the attachment is an image"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the attachment is an image, false otherwise"
          },
          "examples": [
            "attachment.isImage()"
          ]
        },
        {
          "name": "isVideo",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the attachment is a video"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the attachment is a video, false otherwise"
          },
          "examples": [
            "attachment.isVideo()"
          ]
        },
        {
          "name": "saveToFile",
          "is_arbitrary": false,
          "desc": [
            "This allows you to save an attachment to a file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file you want to save the attachment to"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "the future that will complete when the file has been downloaded"
          },
          "examples": [
            "attachment.saveToFile(new File('/home/user/Attachment.jpeg'))"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordBot": {
      "name": "DiscordBot",
      "desc": [
        "This class lets you create a Discord bot and interact with it."
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new DiscordBot instance"
          ],
          "params": [
            {
              "name": "token",
              "type": "String",
              "desc": "The token of the bot"
            }
          ],
          "examples": [
            "new DiscordBot('token')"
          ]
        }
      ],
      "methods": [
        {
          "name": "addCommand",
          "is_arbitrary": false,
          "desc": [
            "This adds a slash command to the bot",
            "Each command must have a name and description, it can have a command, define the next subcommand with 'next'",
            "and subcommands must have the argument type, and can have whether it is required or not",
            "types: 'string', 'integer', 'number', 'boolean', 'user', 'channel', and 'attachment'"
          ],
          "params": [
            {
              "name": "commandMap",
              "type": "Map",
              "desc": "the command map"
            }
          ],
          "examples": [
            "bot.addCommand({\n    \"name\": \"command\",\n    \"description\": \"Does something\",\n    \"command\": fun(event) {\n        // passes in the event\n        // do stuff\n    }\n    \"next: {\n        \"name\": \"subcommand\",\n        \"description\": \"Does something else\",\n        \"required\": true,\n        \"type\": \"String\",\n        \"command\": fun(event, string) {\n            // passes in the event and the string argument\n            // do stuff\n        }\n    }\n});"
          ]
        },
        {
          "name": "getActivity",
          "is_arbitrary": false,
          "desc": [
            "This gets the activity of the bot"
          ],
          "returns": {
            "type": "String",
            "desc": "The activity of the bot, null if no activity"
          },
          "examples": [
            "bot.getActivity()"
          ]
        },
        {
          "name": "getChannel",
          "is_arbitrary": false,
          "desc": [
            "This gets a channel by its id"
          ],
          "params": [
            {
              "name": "channelId",
              "type": "String",
              "desc": "the id of the channel"
            }
          ],
          "returns": {
            "type": "DiscordChannel",
            "desc": "the channel"
          },
          "examples": [
            "bot.getChannel('12345678901234567890123456789012')"
          ]
        },
        {
          "name": "getServer",
          "is_arbitrary": false,
          "desc": [
            "This gets a server by its id"
          ],
          "params": [
            {
              "name": "serverId",
              "type": "String",
              "desc": "the id of the server"
            }
          ],
          "returns": {
            "type": "DiscordServer",
            "desc": "the server"
          },
          "examples": [
            "bot.getServer('12345678901234567890123456789012')"
          ]
        },
        {
          "name": "getStatus",
          "is_arbitrary": false,
          "desc": [
            "This gets the status of the bot"
          ],
          "returns": {
            "type": "String",
            "desc": "The status of the bot"
          },
          "examples": [
            "bot.getStatus()"
          ]
        },
        {
          "name": "getUserId",
          "is_arbitrary": false,
          "desc": [
            "This gets the user id of the bot"
          ],
          "returns": {
            "type": "String",
            "desc": "The user id of the bot"
          },
          "examples": [
            "bot.getUserId()"
          ]
        },
        {
          "name": "registerEvent",
          "is_arbitrary": false,
          "desc": [
            "This registers a function to be called when an event is triggered"
          ],
          "params": [
            {
              "name": "eventName",
              "type": "String",
              "desc": "the name of the event"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be called"
            }
          ],
          "examples": [
            "bot.registerEvent('MessageReceivedEvent', function(event) { })"
          ]
        },
        {
          "name": "removeCommand",
          "is_arbitrary": false,
          "desc": [
            "This removes a slash command from the bot"
          ],
          "params": [
            {
              "name": "commandName",
              "type": "String",
              "desc": "the name of the command"
            }
          ],
          "examples": [
            "bot.removeCommand('command')"
          ]
        },
        {
          "name": "setActivity",
          "is_arbitrary": false,
          "desc": [
            "This sets the activity of the bot"
          ],
          "params": [
            {
              "name": "activity",
              "type": "String",
              "desc": "The activity you want the bot to have"
            },
            {
              "name": "message",
              "type": "String",
              "desc": "The message you want to display"
            }
          ],
          "examples": [
            "bot.setActivity('PLAYING', 'Arucas')"
          ]
        },
        {
          "name": "setStatus",
          "is_arbitrary": false,
          "desc": [
            "This sets the status of the bot"
          ],
          "params": [
            {
              "name": "status",
              "type": "String",
              "desc": "The status you want the bot to have"
            }
          ],
          "examples": [
            "bot.setStatus('ONLINE')"
          ]
        },
        {
          "name": "stop",
          "is_arbitrary": false,
          "desc": [
            "This stops the bot"
          ],
          "examples": [
            "bot.stop()"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordChannel": {
      "name": "DiscordChannel",
      "desc": [
        "This class allows you to get and send messages in the channel"
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getHistory",
          "is_arbitrary": false,
          "desc": [
            "This gets the last X messages"
          ],
          "params": [
            {
              "name": "amount",
              "type": "Number",
              "desc": "the amount of messages to get"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the messages"
          },
          "examples": [
            "channel.getMessages(10);"
          ]
        },
        {
          "name": "getMessageFromId",
          "is_arbitrary": false,
          "desc": [
            "This gets a message by its id"
          ],
          "params": [
            {
              "name": "messageId",
              "type": "String",
              "desc": "the id of the message"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message"
          },
          "examples": [
            "channel.getMessageFromId('12345678901234567890123456789012');"
          ]
        },
        {
          "name": "markTyping",
          "is_arbitrary": false,
          "desc": [
            "This marks the bot as typing in this channel, it lasts 10 seconds or until the message is sent"
          ],
          "examples": [
            "channel.markTyping();"
          ]
        },
        {
          "name": "sendEmbed",
          "is_arbitrary": false,
          "desc": [
            "This sends an embed to this channel.",
            "In the embed map, you can use the following keys:",
            "'title' as String, ''description' as String or List of String, 'colour'/'color' as Number",
            "'fields' as Map with keys: ('name' as String, 'value' as String, 'inline' as Boolean)",
            "and 'image' as String that is an url"
          ],
          "params": [
            {
              "name": "embedMap",
              "type": "Map",
              "desc": "the embed map"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "channel.sendEmbed({\n    'title': 'EMBED!',\n    'description': ['Wow', 'Nice'],\n    'colour': 0xFFFFFF\n});"
          ]
        },
        {
          "name": "sendFile",
          "is_arbitrary": false,
          "desc": [
            "This sends a file to this channel"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file you want to send"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "channel.sendFile(new File('a/b/totally_real_file.txt'));"
          ]
        },
        {
          "name": "sendMessage",
          "is_arbitrary": false,
          "desc": [
            "This sends a message to this channel"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "channel.sendMessage('Hello World!');"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordEvent": {
      "name": "DiscordEvent",
      "desc": [
        "This class is an event wrapper that you can use to access event parameters."
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getChannel",
          "is_arbitrary": false,
          "desc": [
            "This gets the channel that is related to the event"
          ],
          "returns": {
            "type": "DiscordChannel",
            "desc": "the channel"
          },
          "examples": [
            "event.getChannel();"
          ]
        },
        {
          "name": "getEventName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the event"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the event"
          },
          "examples": [
            "event.getEventName();"
          ]
        },
        {
          "name": "getMessage",
          "is_arbitrary": false,
          "desc": [
            "This gets the message that is related to the event"
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message"
          },
          "examples": [
            "event.getMessage();"
          ]
        },
        {
          "name": "getServer",
          "is_arbitrary": false,
          "desc": [
            "This gets the server that is related to the event"
          ],
          "returns": {
            "type": "DiscordServer",
            "desc": "the server"
          },
          "examples": [
            "event.getServer();"
          ]
        },
        {
          "name": "getUser",
          "is_arbitrary": false,
          "desc": [
            "This gets the user that is related to the event"
          ],
          "returns": {
            "type": "DiscordUser",
            "desc": "the user"
          },
          "examples": [
            "event.getUser();"
          ]
        },
        {
          "name": "reply",
          "is_arbitrary": false,
          "desc": [
            "This replies to the event with the given message"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message"
            }
          ],
          "examples": [
            "event.reply('Reply!');"
          ]
        },
        {
          "name": "replyWithEmbed",
          "is_arbitrary": false,
          "desc": [
            "This replies to the event with the given embed map",
            "In the embed map, you can use the following keys:",
            "'title' as String, ''description' as String or List of String, 'colour'/'color' as Number",
            "'fields' as Map with keys: ('name' as String, 'value' as String, 'inline' as Boolean)",
            "and 'image' as String that is an url"
          ],
          "params": [
            {
              "name": "embedMap",
              "type": "Map",
              "desc": "the embed map"
            }
          ],
          "examples": [
            "event.replyWithEmbed({\n    'title': 'EMBED!',\n    'description': ['Wow', 'Nice'],\n    'colour': 0xFFFFFF\n});"
          ]
        },
        {
          "name": "replyWithFile",
          "is_arbitrary": false,
          "desc": [
            "This replies to the event with the given file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file"
            }
          ],
          "examples": [
            "event.replyWithFile(new File('/path/to/file.txt'));"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordMessage": {
      "name": "DiscordMessage",
      "desc": [
        "This class allows you to interact with Discord messages."
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "addReaction",
          "is_arbitrary": false,
          "desc": [
            "This adds a reaction to the message with a specific emoji id"
          ],
          "params": [
            {
              "name": "emojiId",
              "type": "String",
              "desc": "the emoji id"
            }
          ],
          "examples": [
            "message.addReaction('012789012930198');"
          ]
        },
        {
          "name": "addReactionUnicode",
          "is_arbitrary": false,
          "desc": [
            "This adds a reaction to the message with a specific unicode"
          ],
          "params": [
            {
              "name": "unicode",
              "type": "String",
              "desc": "the unicode character"
            }
          ],
          "examples": [
            "message.addReactionUnicode('\\uD83D\\uDE00');"
          ]
        },
        {
          "name": "delete",
          "is_arbitrary": false,
          "desc": [
            "This deletes the message"
          ],
          "examples": [
            "message.delete();"
          ]
        },
        {
          "name": "getAttachments",
          "is_arbitrary": false,
          "desc": [
            "This gets the attachments of the message"
          ],
          "returns": {
            "type": "List",
            "desc": "List with the attachments of the message"
          },
          "examples": [
            "message.getAttachments();"
          ]
        },
        {
          "name": "getAuthor",
          "is_arbitrary": false,
          "desc": [
            "This gets the author of the message"
          ],
          "returns": {
            "type": "DiscordUser",
            "desc": "The author of the message"
          },
          "examples": [
            "message.getAuthor();"
          ]
        },
        {
          "name": "getChannel",
          "is_arbitrary": false,
          "desc": [
            "This gets the channel the message was sent in"
          ],
          "returns": {
            "type": "DiscordChannel",
            "desc": "The channel the message was sent in"
          },
          "examples": [
            "message.getChannel();"
          ]
        },
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the message"
          ],
          "returns": {
            "type": "String",
            "desc": "The id of the message"
          },
          "examples": [
            "message.getId();"
          ]
        },
        {
          "name": "getRaw",
          "is_arbitrary": false,
          "desc": [
            "This gets the raw message content"
          ],
          "returns": {
            "type": "String",
            "desc": "The raw message content"
          },
          "examples": [
            "message.getRaw();"
          ]
        },
        {
          "name": "getServer",
          "is_arbitrary": false,
          "desc": [
            "This gets the server the message was sent in"
          ],
          "returns": {
            "type": "DiscordServer",
            "desc": "The server the message was sent in"
          },
          "examples": [
            "message.getServer();"
          ]
        },
        {
          "name": "isEdited",
          "is_arbitrary": false,
          "desc": [
            "This checks if the message is edited"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the message is edited, false if not"
          },
          "examples": [
            "message.isEdited();"
          ]
        },
        {
          "name": "isPinned",
          "is_arbitrary": false,
          "desc": [
            "This checks if the message is pinned"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the message is pinned, false if not"
          },
          "examples": [
            "message.isPinned();"
          ]
        },
        {
          "name": "pin",
          "is_arbitrary": false,
          "desc": [
            "This pins the message if true, and removes if false"
          ],
          "params": [
            {
              "name": "bool",
              "type": "Boolean",
              "desc": "true to pin, false to unpin"
            }
          ],
          "examples": [
            "message.pin(true);"
          ]
        },
        {
          "name": "removeAllReactions",
          "is_arbitrary": false,
          "desc": [
            "This removes all reactions from the message"
          ],
          "examples": [
            "message.removeAllReactions();"
          ]
        },
        {
          "name": "reply",
          "is_arbitrary": false,
          "desc": [
            "This replies to the message with the given message"
          ],
          "params": [
            {
              "name": "message",
              "type": "String",
              "desc": "the message"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "message.reply('Replied!');"
          ]
        },
        {
          "name": "replyWithEmbed",
          "is_arbitrary": false,
          "desc": [
            "This replies to the message with the given embed map",
            "In the embed map, you can use the following keys:",
            "'title' as String, ''description' as String or List of String, 'colour'/'color' as Number",
            "'fields' as Map with keys: ('name' as String, 'value' as String, 'inline' as Boolean)",
            "and 'image' as String that is an url"
          ],
          "params": [
            {
              "name": "embedMap",
              "type": "Map",
              "desc": "the embed map"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "message.replyWithEmbed({\n    'title': 'EMBED!',\n    'description': ['Wow', 'Nice'],\n    'colour': 0xFFFFFF\n});"
          ]
        },
        {
          "name": "replyWithFile",
          "is_arbitrary": false,
          "desc": [
            "This replies to the message with the given file"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file"
            }
          ],
          "returns": {
            "type": "DiscordMessage",
            "desc": "the message that was sent"
          },
          "examples": [
            "message.replyWithFile(new File('path/to/file'));"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordServer": {
      "name": "DiscordServer",
      "desc": [
        "This class allows you to interact with Discord servers."
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "ban",
          "is_arbitrary": false,
          "desc": [
            "This bans a user from the server"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to ban"
            }
          ],
          "examples": [
            "server.ban(user);"
          ]
        },
        {
          "name": "createRole",
          "is_arbitrary": false,
          "desc": [
            "This creates a role in the server",
            "In the role map you can have the following keys:",
            "'name' as String, 'colour'/'color' as Number, 'hoisted' as Boolean, 'mentionable as Boolean'",
            "and 'permissions' as a List of Strings, for example ['Manage Channels', 'Manage Server'], see Discord for more"
          ],
          "params": [
            {
              "name": "roleMap",
              "type": "Map",
              "desc": "the map of the role"
            }
          ],
          "examples": [
            "server.createRole({\n    \"name\": \"new role\",\n    \"colour\": 0xFFFFFF,\n    \"permissions\": [\"Manage Permissions\", \"Ban Members\", \"Administrator\"],\n    \"hoisted\": true,\n    \"mentionable\": true\n});"
          ]
        },
        {
          "name": "getMemberCount",
          "is_arbitrary": false,
          "desc": [
            "This gets the amount of members in the server"
          ],
          "returns": {
            "type": "Number",
            "desc": "the amount of members"
          },
          "examples": [
            "server.getMemberCount();"
          ]
        },
        {
          "name": "getOwnerId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the owner of the server"
          ],
          "returns": {
            "type": "String",
            "desc": "the id of the owner"
          },
          "examples": [
            "server.getOwnerId();"
          ]
        },
        {
          "name": "getUserFromId",
          "is_arbitrary": false,
          "desc": [
            "This gets a user from the server by their id"
          ],
          "params": [
            {
              "name": "userId",
              "type": "String",
              "desc": "the id of the user"
            }
          ],
          "returns": {
            "type": "DiscordUser",
            "desc": "the user, if the user cannot be found returns null"
          },
          "examples": [
            "server.getUserFromId('12345678901234567890123456789012');"
          ]
        },
        {
          "name": "kick",
          "is_arbitrary": false,
          "desc": [
            "This kicks a user from the server"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to kick"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the kick was successful"
          },
          "examples": [
            "server.kick(user);"
          ]
        },
        {
          "name": "unban",
          "is_arbitrary": false,
          "desc": [
            "This unbans a user from the server"
          ],
          "params": [
            {
              "name": "user",
              "type": "DiscordUser",
              "desc": "the user to unban"
            }
          ],
          "examples": [
            "server.unban(user);"
          ]
        }
      ],
      "static_methods": []
    },
    "DiscordUser": {
      "name": "DiscordUser",
      "desc": [
        "This class is used to interact with Discord users."
      ],
      "import_path": "discordapi.Discord",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getId",
          "is_arbitrary": false,
          "desc": [
            "This gets the id of the user"
          ],
          "returns": {
            "type": "String",
            "desc": "The id of the user"
          },
          "examples": [
            "user.getId();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the user"
          ],
          "returns": {
            "type": "String",
            "desc": "The name of the user"
          },
          "examples": [
            "user.getName();"
          ]
        },
        {
          "name": "getNameAndTag",
          "is_arbitrary": false,
          "desc": [
            "This gets the name and tag of the user"
          ],
          "returns": {
            "type": "String",
            "desc": "The name and tag of the user"
          },
          "examples": [
            "user.getNameAndTag();"
          ]
        },
        {
          "name": "getTag",
          "is_arbitrary": false,
          "desc": [
            "This gets the tag of the user, the numbers after the #"
          ],
          "returns": {
            "type": "String",
            "desc": "The tag of the user"
          },
          "examples": [
            "user.getTag();"
          ]
        }
      ],
      "static_methods": []
    },
    "Enum": {
      "name": "Enum",
      "desc": [
        "This class is the super class of all enums in Arucas.",
        "Enums cannot be instantiated or extended"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the name of an enum value"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the enum value"
          },
          "examples": [
            "enum.getName();"
          ]
        },
        {
          "name": "ordinal",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the ordinal of the enum value"
          ],
          "returns": {
            "type": "Number",
            "desc": "the ordinal of the enum value"
          },
          "examples": [
            "enum.ordinal();"
          ]
        }
      ],
      "static_methods": []
    },
    "Error": {
      "name": "Error",
      "desc": [
        "This class is used for errors, and this is the only type that can be thrown.",
        "You are able to extend this class to create your own error types"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new Error value with no message"
          ],
          "examples": [
            "new Error();"
          ]
        },
        {
          "desc": [
            "This creates a new Error value with the given details as a message"
          ],
          "params": [
            {
              "name": "details",
              "type": "String",
              "desc": "the details of the error"
            }
          ],
          "examples": [
            "new Error('This is an error');"
          ]
        },
        {
          "desc": [
            "This creates a new Error value with the given details as a message and the given value"
          ],
          "params": [
            {
              "name": "details",
              "type": "String",
              "desc": "the details of the error"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value that is related to the error"
            }
          ],
          "examples": [
            "new Error('This is an error', [1, 2, 3]);"
          ]
        }
      ],
      "methods": [
        {
          "name": "getDetails",
          "is_arbitrary": false,
          "desc": [
            "This returns the raw message of the error"
          ],
          "returns": {
            "type": "String",
            "desc": "the details of the error"
          },
          "examples": [
            "error.getDetails();"
          ]
        },
        {
          "name": "getStackTraceString",
          "is_arbitrary": false,
          "desc": [
            "This prints the stack trace of this error"
          ],
          "returns": {
            "type": "String",
            "desc": "the stack trace converted to a string"
          },
          "examples": [
            "error.getStackTraceString();"
          ]
        },
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "This returns the value that is related to the error"
          ],
          "returns": {
            "type": "Object",
            "desc": "the value that is related to the error"
          },
          "examples": [
            "error.getValue();"
          ]
        }
      ],
      "static_methods": []
    },
    "File": {
      "name": "File",
      "desc": [
        "This class allows you to read and write files"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new File object with set path"
          ],
          "params": [
            {
              "name": "path",
              "type": "String",
              "desc": "the path of the file"
            }
          ],
          "examples": [
            "new File('foo/bar/script.arucas');"
          ]
        }
      ],
      "methods": [
        {
          "name": "createDirectory",
          "is_arbitrary": false,
          "desc": [
            "This creates all parent directories of the file if they don't already exist"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the directories were created"
          },
          "examples": [
            "file.createDirectory();"
          ]
        },
        {
          "name": "delete",
          "is_arbitrary": false,
          "desc": [
            "This deletes the file"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the file was deleted"
          },
          "examples": [
            "file.delete();"
          ]
        },
        {
          "name": "exists",
          "is_arbitrary": false,
          "desc": [
            "This returns if the file exists"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the file exists"
          },
          "examples": [
            "file.exists();"
          ]
        },
        {
          "name": "getAbsolutePath",
          "is_arbitrary": false,
          "desc": [
            "This returns the absolute path of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the absolute path of the file"
          },
          "examples": [
            "file.getAbsolutePath();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This returns the name of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the file"
          },
          "examples": [
            "File.getName();"
          ]
        },
        {
          "name": "getPath",
          "is_arbitrary": false,
          "desc": [
            "This returns the path of the file"
          ],
          "returns": {
            "type": "String",
            "desc": "the path of the file"
          },
          "examples": [
            "file.getPath();"
          ]
        },
        {
          "name": "getSubFiles",
          "is_arbitrary": false,
          "desc": [
            "This returns a list of all the sub files in the directory"
          ],
          "returns": {
            "type": "List",
            "desc": "a list of all the sub files in the directory"
          },
          "examples": [
            "file.getSubFiles();"
          ]
        },
        {
          "name": "open",
          "is_arbitrary": false,
          "desc": [
            "This opens the file (as in opens it on your os)"
          ],
          "examples": [
            "file.open();"
          ]
        },
        {
          "name": "read",
          "is_arbitrary": false,
          "desc": [
            "This reads the file and returns the contents as a string"
          ],
          "returns": {
            "type": "String",
            "desc": "the contents of the file"
          },
          "examples": [
            "file.read();"
          ]
        },
        {
          "name": "resolve",
          "is_arbitrary": false,
          "desc": [
            "This gets a resolves file object from the current one"
          ],
          "params": [
            {
              "name": "filePath",
              "type": "String",
              "desc": "the relative file path"
            }
          ],
          "returns": {
            "type": "File",
            "desc": "the resolved file"
          },
          "examples": [
            "file.resolve('child.txt');"
          ]
        },
        {
          "name": "write",
          "is_arbitrary": false,
          "desc": [
            "This writes a string to a file"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to write to the file"
            }
          ],
          "examples": [
            "file.write('Hello World!');"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "getDirectory",
          "is_arbitrary": false,
          "desc": [
            "This returns the file of the working directory"
          ],
          "returns": {
            "type": "File",
            "desc": "the file of the working directory"
          },
          "examples": [
            "File.getDirectory();"
          ]
        }
      ]
    },
    "Function": {
      "name": "Function",
      "desc": [
        "This class is used for functions, and this is the only type that can be called.",
        "You are able to extend this class and implement an 'invoke' method to create",
        "your own function types, this class cannot be instantiated directly"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a function, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildFunction: Function {\n    ChildFunction(): super();\n}"
          ]
        }
      ],
      "methods": [],
      "static_methods": []
    },
    "Future": {
      "name": "Future",
      "desc": [
        "This class is used to represent values that are in the future.",
        "More precisely values that are being evaluated on another thread,",
        "this allows you to access those values once they've been processed"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "await",
          "is_arbitrary": false,
          "desc": [
            "This blocks the current thread until the future has",
            "been completed and then returns the value of the future"
          ],
          "returns": {
            "type": "Object",
            "desc": "The value of the future"
          },
          "examples": [
            "future.await();"
          ]
        },
        {
          "name": "isComplete",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the future has been completed"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "Whether the future has been completed"
          },
          "examples": [
            "future.isComplete();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "completed",
          "is_arbitrary": false,
          "desc": [
            "This returns a future that with a complete value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "The value to complete the future with"
            }
          ],
          "returns": {
            "type": "Future",
            "desc": "The future that has been completed with the value"
          },
          "examples": [
            "future = Future.completed(true);"
          ]
        }
      ]
    },
    "Iterable": {
      "name": "Iterable",
      "desc": [
        "This class represents an object that can be iterated over.",
        "This class is used internally to denote whether an object can be",
        "iterated over inside a foreach loop"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an iterable, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class IterableImpl: Iterable {\n    IterableImpl(): super();\n    \n    fun iterator() {\n        // Example\n        return [].iterator();\n    }\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "iterator",
          "is_arbitrary": false,
          "desc": [
            "This gets the generated iterator"
          ],
          "returns": {
            "type": "Iterator",
            "desc": "the generated iterator"
          },
          "examples": [
            "iterable = [];\ni = iterable.iterator();\nwhile (i.hasNext()) {\n    next = i.next();\n}\n\n// Or just, compiles to above\nforeach (next : iterable); "
          ]
        }
      ],
      "static_methods": []
    },
    "Iterator": {
      "name": "Iterator",
      "desc": [
        "This class represents an object that iterates.",
        "This is what is used internally to iterate in a",
        "foreach loop and you can create your own iterators",
        "to use be able to use them inside a foreach"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an iterator, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class IteratorImpl: Iterator {\n    IteratorImpl(): super();\n    \n    fun hasNext() {\n        return false;\n    }\n    \n    fun next() {\n        throw new Error(\"Nothing next\");\n    }\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "hasNext",
          "is_arbitrary": false,
          "desc": [
            "Checks whether the iterator has a next item to iterate"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether there are items left to iterate"
          },
          "examples": [
            "iterator = [].iterator();\niterator.hasNext();"
          ]
        },
        {
          "name": "next",
          "is_arbitrary": false,
          "desc": [
            "Gets the next item in the iterator, may throw if there is no next item"
          ],
          "returns": {
            "type": "Object",
            "desc": "the next item"
          },
          "examples": [
            "iterator = [10, 20].iterator();\niterator.next(); // 10\niterator.next(); // 20"
          ]
        }
      ],
      "static_methods": []
    },
    "Java": {
      "name": "Java",
      "desc": [
        "This class wraps Java values allowing for interactions between Java and Arucas.",
        "This class cannot be instantiated or extended but you can create Java values by",
        "using the static method 'Java.valueOf()' to convert Arucas to Java"
      ],
      "import_path": "util.Internal",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "callMethod",
          "is_arbitrary": true,
          "deprecated": [
            "You should call the method directly on the value: Java.valueOf('').isBlank();"
          ],
          "desc": [
            "This calls the specified method with the specified parameters, calling the method",
            "with this function has no benefits unless you are calling a function that also is",
            "native to Arucas. For example `object.copy()` will use the Arucas 'copy' function.",
            "But this is extremely rare so almost all of the time you should all the method normally."
          ],
          "params": [
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters...",
              "type": "Object",
              "desc": "the parameters to call the method with"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the return value of the method call wrapped in the Java wrapper"
          },
          "examples": [
            "Java.valueOf('').callMethod('isBlank');"
          ]
        },
        {
          "name": "getField",
          "is_arbitrary": false,
          "deprecated": [
            "You should call the method directly on the value: `Java.constructClass('me.senseiwells.impl.Test').A;`"
          ],
          "desc": [
            "This returns the Java wrapped value of the specified field.",
            "There is no reason for you to be using this method, it will be removed in future versions"
          ],
          "params": [
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java wrapped value of the field"
          },
          "examples": [
            "Java.constructClass('me.senseiwells.impl.Test').getField('A');"
          ]
        },
        {
          "name": "getMethodDelegate",
          "is_arbitrary": false,
          "deprecated": [
            "Consider wrapping the method in a lambda instead"
          ],
          "desc": [
            "This returns a method delegate for the specified method name and parameters.",
            "This should be avoided and replaced with a Arucas function wrapping the call instead.",
            "For example: `delegate = (fun() { Java.valueOf('').isBlank(); });`.",
            "Another thing to note is that the parameter count parameter is no longer",
            "used and ignored internally, instead the parameters are calculated when you",
            "call the delegate. The parameter remains for backwards compatability."
          ],
          "params": [
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the function containing the Java method delegate"
          },
          "examples": [
            "Java.valueOf('string!').getMethodDelegate('isBlank', 0);"
          ]
        },
        {
          "name": "setField",
          "is_arbitrary": false,
          "deprecated": [
            "You should assign the value directly on the value: Java.constructClass('me.senseiwells.impl.Test').A = 'Hello';"
          ],
          "desc": [
            "This sets the specified field to the specified value",
            "There is no reason for you to be using this method, it will be removed in future versions"
          ],
          "params": [
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value to set the field to, the value type must match the type of the field"
            }
          ],
          "examples": [
            "Java.constructClass('me.senseiwells.impl.Test').setField('A', 'Hello');"
          ]
        },
        {
          "name": "toArucas",
          "is_arbitrary": false,
          "desc": [
            "This converts the Java value to an Arucas Value if possible, this may still",
            "be of a Java value if it cannot be converted. For example, Strings, Numbers, Lists",
            "will be converted but "
          ],
          "returns": {
            "type": "Object",
            "desc": "the Value in Arucas, this may still be of Java value if the value cannot be converted into an Arucas value, values like Strings, Numbers, Lists, etc... will be converted"
          },
          "examples": [
            "Java.valueOf([1, 2, 3]).toArucas();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "arrayOf",
          "is_arbitrary": true,
          "desc": [
            "Creates a Java Object array with a given values, this will be the size of the array,",
            "this cannot be used to create primitive arrays"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Object",
              "desc": "the values to add to the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Object array"
          },
          "examples": [
            "Java.arrayOf(1, 2, 3, 'string!', false);"
          ]
        },
        {
          "name": "booleanArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java boolean array with a given size, the array is filled with false",
            "by default and can be filled with only booleans"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java boolean array"
          },
          "examples": [
            "Java.booleanArray(10);"
          ]
        },
        {
          "name": "booleanOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value boolean, to be used in Java"
          ],
          "params": [
            {
              "name": "bool",
              "type": "Boolean",
              "desc": "the boolean to convert to a Java boolean"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the boolean in Java wrapper"
          },
          "examples": [
            "Java.booleanOf(true);"
          ]
        },
        {
          "name": "byteArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java byte array with a given size, the array is filled with 0's",
            "by default and can be filled with only bytes"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java byte array"
          },
          "examples": [
            "Java.byteArray(10);"
          ]
        },
        {
          "name": "byteOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value byte, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java byte"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the byte in Java wrapper"
          },
          "examples": [
            "Java.byteOf(1);"
          ]
        },
        {
          "name": "callStaticMethod",
          "is_arbitrary": true,
          "deprecated": [
            "You should use 'Java.classOf(name)' then call the static method"
          ],
          "desc": [
            "Calls a static method of a Java class.",
            "This should be avoided and instead use 'classOf' to get the",
            "instance of the class then call the static method on that"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters...",
              "type": "Object",
              "desc": "any parameters to call the method with"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the return value of the method wrapped in the Java wrapper"
          },
          "examples": [
            "Java.callStaticMethod('java.lang.Integer', 'parseInt', '123');"
          ]
        },
        {
          "name": "charArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java char array with a given size, the array is filled with null characters's",
            "by default and can be filled with only chars"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java char array"
          },
          "examples": [
            "Java.charArray(10);"
          ]
        },
        {
          "name": "charOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value char, to be used in Java"
          ],
          "params": [
            {
              "name": "char",
              "type": "String",
              "desc": "the char to convert to a Java char"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the char in Java wrapper"
          },
          "examples": [
            "Java.charOf('a');"
          ]
        },
        {
          "name": "classFromName",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' instead"
          ],
          "desc": [
            "Gets a Java class from the name of the class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class you want to get"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Class<?> value wrapped in the Java wrapper"
          },
          "examples": [
            "Java.classFromName('java.util.ArrayList');"
          ]
        },
        {
          "name": "classOf",
          "is_arbitrary": false,
          "desc": [
            "Gets a Java class from the name of the class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class you want to get"
            }
          ],
          "returns": {
            "type": "JavaClass",
            "desc": "the Java class value which can be used as a class reference"
          },
          "examples": [
            "Java.classOf('java.util.ArrayList');"
          ]
        },
        {
          "name": "constructClass",
          "is_arbitrary": true,
          "deprecated": [
            "You should use 'Java.classOf(name)' then call the result to construct the class"
          ],
          "desc": [
            "This constructs a Java class with specified class name and parameters.",
            "This should be avoided and instead use 'classOf' to get the class",
            "instance then call the constructor on that instance"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "parameters...",
              "type": "Object",
              "desc": "any parameters to pass to the constructor"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the constructed Java Object wrapped in the Java wrapper"
          },
          "examples": [
            "Java.constructClass('java.util.ArrayList');"
          ]
        },
        {
          "name": "consumerOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Consumer object from a given function, it must have one",
            "parameter and any return values will be ignored"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Consumer object"
          },
          "examples": [
            "Java.consumerOf(fun(something) {\n    print(something);\n});"
          ]
        },
        {
          "name": "doubleArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java double array with a given size, the array is filled with 0's",
            "by default and can be filled with only doubles"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java double array"
          },
          "examples": [
            "Java.doubleArray(10);"
          ]
        },
        {
          "name": "doubleOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value double, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java double"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the double in Java wrapper"
          },
          "examples": [
            "Java.doubleOf(1.0);"
          ]
        },
        {
          "name": "floatArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java float array with a given size, the array is filled with 0's",
            "by default and can be filled with only floats"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java float array"
          },
          "examples": [
            "Java.floatArray(10);"
          ]
        },
        {
          "name": "floatOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value float, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java float"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the float in Java wrapper"
          },
          "examples": [
            "Java.floatOf(1.0);"
          ]
        },
        {
          "name": "functionOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Function object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have one parameter and must return a value"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Function object"
          },
          "examples": [
            "Java.functionOf(fun(something) {\n    return something;\n});"
          ]
        },
        {
          "name": "getStaticField",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' then access the static field"
          ],
          "desc": [
            "Gets a static field Java value from a Java class"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java value of the field wrapped in the Java wrapper"
          },
          "examples": [
            "Java.getStaticField('java.lang.Integer', 'MAX_VALUE');"
          ]
        },
        {
          "name": "getStaticMethodDelegate",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' then wrap the static method"
          ],
          "desc": [
            "Gets a static method delegate from a Java class, this should",
            "be avoided and instance use 'classOf' to get the class instance",
            "and then call the method on that class instance. The parameter count",
            "parameter is no longer used internally but remains for backwards compatibility"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "methodName",
              "type": "String",
              "desc": "the name of the method"
            },
            {
              "name": "parameters",
              "type": "Number",
              "desc": "the number of parameters"
            }
          ],
          "returns": {
            "type": "Function",
            "desc": "the delegated Java method in an Arucas Function"
          },
          "examples": [
            "Java.getStaticMethodDelegate('java.lang.Integer', 'parseInt', 1);"
          ]
        },
        {
          "name": "intArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java int array with a given size, the array is filled with 0's",
            "by default and can be filled with only ints"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java int array"
          },
          "examples": [
            "Java.intArray(10);"
          ]
        },
        {
          "name": "intOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value int, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java int"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the int in Java wrapper"
          },
          "examples": [
            "Java.intOf(1);"
          ]
        },
        {
          "name": "longArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java long array with a given size, the array is filled with 0's",
            "by default and can be filled with only longs"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java long array"
          },
          "examples": [
            "Java.longArray(10);"
          ]
        },
        {
          "name": "longOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value long, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java long"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the long in Java wrapper"
          },
          "examples": [
            "Java.longOf(1);"
          ]
        },
        {
          "name": "objectArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Object array with a given size, the array is filled with null values",
            "by default and can be filled with any Java values, this array cannot be expanded"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Object array"
          },
          "examples": [
            "Java.arrayWithSize(10);"
          ]
        },
        {
          "name": "predicateOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Predicate object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have one parameter and must return a boolean"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Predicate object"
          },
          "examples": [
            "Java.predicateOf(fun(something) {\n    return something == 'something';\n});"
          ]
        },
        {
          "name": "runnableOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Runnable object from a given function, this must",
            "have no paramters and any return values will be ignored"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Runnable object"
          },
          "examples": [
            "Java.runnableOf(fun() {\n    print('runnable');\n});"
          ]
        },
        {
          "name": "setStaticField",
          "is_arbitrary": false,
          "deprecated": [
            "You should use 'Java.classOf(name)' then assign the static field"
          ],
          "desc": [
            "Sets a static field in a Java class with a new value"
          ],
          "params": [
            {
              "name": "className",
              "type": "String",
              "desc": "the name of the class"
            },
            {
              "name": "fieldName",
              "type": "String",
              "desc": "the name of the field"
            },
            {
              "name": "newValue",
              "type": "Object",
              "desc": "the new value"
            }
          ],
          "examples": [
            "// Obviously this won't work, but it's just an example\nJava.setStaticField('java.lang.Integer', 'MAX_VALUE', Java.intOf(100));\""
          ]
        },
        {
          "name": "shortArray",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java short array with a given size, the array is filled with 0's",
            "by default and can be filled with only shorts"
          ],
          "params": [
            {
              "name": "size",
              "type": "Number",
              "desc": "the size of the array"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java short array"
          },
          "examples": [
            "Java.shortArray(10);"
          ]
        },
        {
          "name": "shortOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java value short, to be used in Java"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert to a Java short"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the short in Java wrapper"
          },
          "examples": [
            "Java.shortOf(1);"
          ]
        },
        {
          "name": "supplierOf",
          "is_arbitrary": false,
          "desc": [
            "Creates a Java Supplier object from a given function"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to be executed, this must have no parameters and must return (supply) a value"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java Supplier object"
          },
          "examples": [
            "Java.supplierOf(fun() {\n    return 'supplier';\n});"
          ]
        },
        {
          "name": "valueOf",
          "is_arbitrary": false,
          "desc": [
            "Converts any Arucas value into a Java value then wraps it in the Java wrapper and returns it"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "any value to get the Java value of"
            }
          ],
          "returns": {
            "type": "Java",
            "desc": "the Java wrapper value, null if argument was null"
          },
          "examples": [
            "Java.valueOf('Hello World!');"
          ]
        }
      ]
    },
    "JavaClass": {
      "name": "JavaClass",
      "desc": [
        "This class 'acts' as a Java class. You are able to call this class which",
        "will invoke the Java class' constructor, and access and assign the static",
        "fields of the class. This class cannot be instantiated or extended."
      ],
      "import_path": "util.Internal",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Json": {
      "name": "Json",
      "desc": [
        "This class allows you to create and manipulate JSON objects.",
        "This class cannot be instantiated or extended"
      ],
      "import_path": "util.Json",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getValue",
          "is_arbitrary": false,
          "desc": [
            "This converts the Json back into an object"
          ],
          "returns": {
            "type": "Object",
            "desc": "the Value parsed from the Json"
          },
          "examples": [
            "json.getValue();"
          ]
        },
        {
          "name": "writeToFile",
          "is_arbitrary": false,
          "desc": [
            "This writes the Json to a file",
            "if the file given is a directory or cannot be",
            "written to, an error will be thrown"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file that you want to write to"
            }
          ],
          "examples": [
            "json.writeToFile(new File('D:/cool/realDirectory'));"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "fromFile",
          "is_arbitrary": false,
          "desc": [
            "This will read a file and parse it into a Json"
          ],
          "params": [
            {
              "name": "file",
              "type": "File",
              "desc": "the file that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the file"
          },
          "examples": [
            "Json.fromFile(new File('this/path/is/an/example.json'));"
          ]
        },
        {
          "name": "fromList",
          "is_arbitrary": false,
          "desc": [
            "This converts a list into a Json, an important thing to note is that",
            "any values that are not Numbers, Booleans, Lists, Maps, or Null will use their",
            "toString() member to convert them to a string"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "the list that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the list"
          },
          "examples": [
            "Json.fromList(['value', 1, true]);"
          ]
        },
        {
          "name": "fromMap",
          "is_arbitrary": false,
          "desc": [
            "This converts a map into a Json, an important thing to note is that",
            "any values that are not Numbers, Booleans, Lists, Maps, or Null will use their",
            "toString() member to convert them to a string"
          ],
          "params": [
            {
              "name": "map",
              "type": "Map",
              "desc": "the map that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the map"
          },
          "examples": [
            "Json.fromMap({'key': ['value1', 'value2']});"
          ]
        },
        {
          "name": "fromString",
          "is_arbitrary": false,
          "desc": [
            "This converts a string into a Json provided it is formatted correctly,",
            "otherwise throwing an error"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string that you want to parse into a Json"
            }
          ],
          "returns": {
            "type": "Json",
            "desc": "the Json parsed from the string"
          },
          "examples": [
            "Json.fromString('{\"key\":\"value\"}');"
          ]
        }
      ]
    },
    "List": {
      "name": "List",
      "desc": [
        "This class is used for collections of ordered elements"
      ],
      "import_path": null,
      "superclass": "Collection",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a list, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildList: List {\n    ChildList(): super();\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "addAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add all the values in another collection to the list"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to add to the list"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].addAll(['foo', 'object']); // ['object', 81, 96, 'case', 'foo', 'object']"
          ]
        },
        {
          "name": "append",
          "is_arbitrary": false,
          "desc": [
            "This allows you to append a value to the end of the list"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to append"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].append('foo'); // ['object', 81, 96, 'case', 'foo']"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This allows you to clear the list"
          ],
          "examples": [
            "['object', 81, 96, 'case'].clear(); // []"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list contains a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list contains the value"
          },
          "examples": [
            "['object', 81, 96, 'case'].contains('case'); // true"
          ]
        },
        {
          "name": "containsAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the list contains all the values in another collection"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to check agains"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the list contains all the values in the collection"
          },
          "examples": [
            "['object', 81, 96, 'case'].containsAll(['foo', 'object']); // false"
          ]
        },
        {
          "name": "filter",
          "is_arbitrary": false,
          "desc": [
            "This filters the list using the predicate, a function that either returns",
            "true or false, based on the element on whether it should be kept or not,",
            "and returns a new list with the filtered elements"
          ],
          "params": [
            {
              "name": "predicate",
              "type": "Function",
              "desc": "a function that takes a value and returns Boolean"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the filtered collection"
          },
          "examples": [
            "(list = [1, 2, 3]).filter(fun(v) {\n    return v > 1;\n});\n// list = [2, 3]"
          ]
        },
        {
          "name": "flatten",
          "is_arbitrary": false,
          "desc": [
            "If there are any objects in the list that are collections they will",
            "be expanded and added to the list. However collections inside those",
            "collections will not be flattened, this is returned as a new list"
          ],
          "returns": {
            "type": "List",
            "desc": "the flattened list"
          },
          "examples": [
            "(list = [1, 2, 3, [4, 5], [6, [7]]]).flatten();\n// list = [1, 2, 3, 4, 5, 6, [7]]"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the value at a specific index, alternative to bracket accessor,",
            "this will throw an error if the index given is out of bounds"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the value you want to get"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value at the index"
          },
          "examples": [
            "['object', 81, 96, 'case'].get(1); // 81"
          ]
        },
        {
          "name": "indexOf",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the index of a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get the index of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the index of the value"
          },
          "examples": [
            "['object', 81, 96, 'case', 81].indexOf(81); // 1"
          ]
        },
        {
          "name": "insert",
          "is_arbitrary": false,
          "desc": [
            "This allows you to insert a value at a specific index, this will throw an error if the index is out of bounds"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to insert"
            },
            {
              "name": "index",
              "type": "Number",
              "desc": "the index you want to insert the value at"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].insert('foo', 1); // ['object', 'foo', 81, 96, 'case']"
          ]
        },
        {
          "name": "lastIndexOf",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the last index of a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get the last index of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the last index of the value"
          },
          "examples": [
            "['object', 81, 96, 'case', 96].lastIndexOf(96); // 4"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This maps the list using the mapper, a function that takes a value and",
            "returns a new value, and returns a new list with the mapped elements"
          ],
          "params": [
            {
              "name": "mapper",
              "type": "Function",
              "desc": "a function that takes a value and returns a new value"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the mapped collection"
          },
          "examples": [
            "(list = [1, 2, 3]).map(fun(v) {\n    return v * 2;\n});\n// list = [2, 4, 6]"
          ]
        },
        {
          "name": "prepend",
          "is_arbitrary": false,
          "desc": [
            "This allows you to prepend a value to the beginning of the list"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to prepend"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96].prepend('foo'); // ['foo', 'object', 81, 96]"
          ]
        },
        {
          "name": "reduce",
          "is_arbitrary": false,
          "desc": [
            "This reduces the list using the reducer, a function that takes an",
            "accumulated value and a new value and returns the next accumulated value"
          ],
          "params": [
            {
              "name": "reducer",
              "type": "Function",
              "desc": "a function that takes a value and returns a new value"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the reduced value"
          },
          "examples": [
            "// a will start at 1 and b at 2\n// next accumulator will be 3\n// a will be 3 and b will be 3 = 6\n(list = [1, 2, 3]).reduce(fun(a, b) {\n    return a + b;\n});\n// 6"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove the value at a specific index, alternative to bracket assignment.",
            "This will throw an error if the index is out of bounds"
          ],
          "params": [
            {
              "name": "index",
              "type": "Number",
              "desc": "the index of the value you want to remove"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value that was removed"
          },
          "examples": [
            "['object', 81, 96, 'case'].remove(1); // 81"
          ]
        },
        {
          "name": "removeAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove all the values in another collection from the list"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection you want to remove from the list"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].removeAll(['foo', 'object']); // [81, 96, 'case']"
          ]
        },
        {
          "name": "retainAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to retain only the values that are in both lists"
          ],
          "params": [
            {
              "name": "list",
              "type": "List",
              "desc": "the list you want to retain values from"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].retainAll(['case', 'object', 54]); // ['object', 'case']"
          ]
        },
        {
          "name": "reverse",
          "is_arbitrary": false,
          "desc": [
            "This allows you to reverse the list"
          ],
          "returns": {
            "type": "List",
            "desc": "the reversed list"
          },
          "examples": [
            "['a', 'b', 'c', 'd'].reverse(); // ['d', 'c', 'b', 'a']"
          ]
        },
        {
          "name": "set",
          "is_arbitrary": false,
          "desc": [
            "This allows you to set the value at a specific index, alternative to bracket assignment,",
            "this will throw an erroor if the index given is out of bounds"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to set"
            },
            {
              "name": "index",
              "type": "Number",
              "desc": "the index you want to set the value at"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list"
          },
          "examples": [
            "['object', 81, 96, 'case'].set('foo', 1); // ['object', 'foo', 96, 'case']"
          ]
        },
        {
          "name": "shuffle",
          "is_arbitrary": false,
          "desc": [
            "This allows you to shuffle the list"
          ],
          "returns": {
            "type": "List",
            "desc": "the shuffled list"
          },
          "examples": [
            "['a', 'b', 'c', 'd'].shuffle(); // some random order ¯\\_(ツ)_/¯"
          ]
        },
        {
          "name": "sort",
          "is_arbitrary": false,
          "desc": [
            "This allows you to sort the list using the elements compare method"
          ],
          "returns": {
            "type": "List",
            "desc": "the sorted list"
          },
          "examples": [
            "['d', 'a', 'c', 'b'].sort(); // ['a', 'b', 'c', 'd']"
          ]
        },
        {
          "name": "sort",
          "is_arbitrary": false,
          "desc": [
            "This allows you to sort the list using a comparator function"
          ],
          "params": [
            {
              "name": "comparator",
              "type": "Function",
              "desc": "the comparator function"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the sorted list"
          },
          "examples": [
            "[6, 5, 9, -10].sort(fun(a, b) { return a - b; }); // [-10, 5, 6, 9]"
          ]
        }
      ],
      "static_methods": []
    },
    "Map": {
      "name": "Map",
      "desc": [
        "This class is used to create a map of objects, using keys and values.",
        "This class cannot be directly instantiated, but can be extended to create a map of your own type."
      ],
      "import_path": null,
      "superclass": "Collection",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an empty map, this cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildMap: Map {\n    ChildMap(): super();\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This allows you to clear the map of all the keys and values"
          ],
          "examples": [
            "(map = {'key': 'value'}).clear(); // map = {}"
          ]
        },
        {
          "name": "containsKey",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the map contains a specific key"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the map contains the key, false otherwise"
          },
          "examples": [
            "{'key': 'value'}.containsKey('key'); // true"
          ]
        },
        {
          "name": "containsValue",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if the map contains a specific value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the map contains the value, false otherwise"
          },
          "examples": [
            "{'key': 'value'}.containsValue('foo'); // false"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the value of a key in the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to get the value of"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value of the key, will return null if non-existent"
          },
          "examples": [
            "{'key': 'value'}.get('key'); // 'value'"
          ]
        },
        {
          "name": "getKeys",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the keys in the map"
          ],
          "returns": {
            "type": "List",
            "desc": "a complete list of all the keys"
          },
          "examples": [
            "{'key': 'value', 'key2': 'value2'}.getKeys(); // ['key', 'key2']"
          ]
        },
        {
          "name": "getValues",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get the values in the map"
          ],
          "returns": {
            "type": "List",
            "desc": "a complete list of all the values"
          },
          "examples": [
            "{'key': 'value', 'key2': 'value2'}.getValues(); // ['value', 'value2']"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This allows you to map the values in the map and returns a new map"
          ],
          "params": [
            {
              "name": "remapper",
              "type": "Function",
              "desc": "the function you want to map the values with"
            }
          ],
          "returns": {
            "type": "Map",
            "desc": "a new map with the mapped values"
          },
          "examples": [
            "map = {'key': 'value', 'key2': 'value2'}\nmap.map(fun(k, v) {\n    return [v, k];\n});\n// map = {'value': 'key', 'value2': 'key2'}"
          ]
        },
        {
          "name": "put",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put a key and value in the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to put"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to put"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the previous value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.put('key2', 'value2'); // null"
          ]
        },
        {
          "name": "putAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put all the keys and values of another map into this map"
          ],
          "params": [
            {
              "name": "another map",
              "type": "Map",
              "desc": "the map you want to merge into this map"
            }
          ],
          "examples": [
            "(map = {'key': 'value'}).putAll({'key2': 'value2'}); // map = {'key': 'value', 'key2': 'value2'}"
          ]
        },
        {
          "name": "putIfAbsent",
          "is_arbitrary": false,
          "desc": [
            "This allows you to put a key and value in the map if it doesn't exist"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to put"
            },
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to put"
            }
          ],
          "examples": [
            "(map = {'key': 'value'}).putIfAbsent('key2', 'value2'); // map = {'key': 'value', 'key2': 'value2'}"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove a key and its value from the map"
          ],
          "params": [
            {
              "name": "key",
              "type": "Object",
              "desc": "the key you want to remove"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value associated with the key, null if none"
          },
          "examples": [
            "{'key': 'value'}.remove('key'); // 'value'"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "unordered",
          "is_arbitrary": false,
          "desc": [
            "This function allows you to create an unordered map"
          ],
          "returns": {
            "type": "Map",
            "desc": "an unordered map"
          },
          "examples": [
            "Map.unordered();"
          ]
        }
      ]
    },
    "Math": {
      "name": "Math",
      "desc": [
        "Provides many basic math functions. This is a utility class, and cannot be constructed"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [
        {
          "name": "e",
          "assignable": false,
          "desc": [
            "The value of e"
          ],
          "type": "Number",
          "examples": [
            "Math.e;"
          ]
        },
        {
          "name": "pi",
          "assignable": false,
          "desc": [
            "The value of pi"
          ],
          "type": "Number",
          "examples": [
            "Math.pi;"
          ]
        },
        {
          "name": "root2",
          "assignable": false,
          "desc": [
            "The value of root 2"
          ],
          "type": "Number",
          "examples": [
            "Math.root2;"
          ]
        }
      ],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "abs",
          "is_arbitrary": false,
          "desc": [
            "Returns the absolute value of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the absolute value of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the absolute value of the number"
          },
          "examples": [
            "Math.abs(-3);"
          ]
        },
        {
          "name": "arccos",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc cosine of the number"
          },
          "examples": [
            "Math.arccos(Math.cos(Math.pi));"
          ]
        },
        {
          "name": "arcsin",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc sine of the number"
          },
          "examples": [
            "Math.arcsin(Math.sin(Math.pi));"
          ]
        },
        {
          "name": "arctan",
          "is_arbitrary": false,
          "desc": [
            "Returns the arc tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the arc tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the arc tangent of the number"
          },
          "examples": [
            "Math.arctan(Math.tan(Math.pi));"
          ]
        },
        {
          "name": "arctan2",
          "is_arbitrary": false,
          "desc": [
            "Returns the angle theta of the polar coordinates (r, theta) that correspond to the rectangular",
            "coordinates (x, y) by computing the arc tangent of the value y / x"
          ],
          "params": [
            {
              "name": "y",
              "type": "Number",
              "desc": "the ordinate coordinate"
            },
            {
              "name": "x",
              "type": "Number",
              "desc": "the abscissa coordinate"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the theta component of the point (r, theta)"
          },
          "examples": [
            "Math.arctan2(Math.tan(Math.pi), Math.cos(Math.pi)); // -3.141592"
          ]
        },
        {
          "name": "ceil",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number up to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.ceil(3.5);"
          ]
        },
        {
          "name": "clamp",
          "is_arbitrary": false,
          "desc": [
            "Clamps a value between a minimum and maximum"
          ],
          "params": [
            {
              "name": "value",
              "type": "Number",
              "desc": "the value to clamp"
            },
            {
              "name": "min",
              "type": "Number",
              "desc": "the minimum"
            },
            {
              "name": "max",
              "type": "Number",
              "desc": "the maximum"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the clamped value"
          },
          "examples": [
            "Math.clamp(10, 2, 8);"
          ]
        },
        {
          "name": "cos",
          "is_arbitrary": false,
          "desc": [
            "Returns the cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cosine of the number"
          },
          "examples": [
            "Math.cos(Math.pi);"
          ]
        },
        {
          "name": "cosec",
          "is_arbitrary": false,
          "desc": [
            "Returns the cosecant of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cosecant of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cosecant of the number"
          },
          "examples": [
            "Math.cosec(Math.pi);"
          ]
        },
        {
          "name": "cosh",
          "is_arbitrary": false,
          "desc": [
            "Returns the hyperbolic cosine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the hyperbolic cosine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the hyperbolic cosine of the number"
          },
          "examples": [
            "Math.cosh(1);"
          ]
        },
        {
          "name": "cot",
          "is_arbitrary": false,
          "desc": [
            "Returns the cotangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the cotangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the cotangent of the number"
          },
          "examples": [
            "Math.cot(Math.pi);"
          ]
        },
        {
          "name": "floor",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number down to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.floor(3.5);"
          ]
        },
        {
          "name": "lerp",
          "is_arbitrary": false,
          "desc": [
            "Linear interpolation between two numbers"
          ],
          "params": [
            {
              "name": "start",
              "type": "Number",
              "desc": "the first number"
            },
            {
              "name": "end",
              "type": "Number",
              "desc": "the second number"
            },
            {
              "name": "delta",
              "type": "Number",
              "desc": "the interpolation factor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the interpolated number"
          },
          "examples": [
            "Math.lerp(0, 10, 0.5);"
          ]
        },
        {
          "name": "ln",
          "is_arbitrary": false,
          "desc": [
            "Returns the natural logarithm of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the natural logarithm of the number"
          },
          "examples": [
            "Math.ln(Math.e);"
          ]
        },
        {
          "name": "log",
          "is_arbitrary": false,
          "desc": [
            "Returns the logarithm of a number with a specified base"
          ],
          "params": [
            {
              "name": "base",
              "type": "Number",
              "desc": "the base"
            },
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the logarithm of the number"
          },
          "examples": [
            "Math.log(2, 4);"
          ]
        },
        {
          "name": "log10",
          "is_arbitrary": false,
          "desc": [
            "Returns the base 10 logarithm of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the logarithm of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the base 10 logarithm of the number"
          },
          "examples": [
            "Math.log10(100);"
          ]
        },
        {
          "name": "max",
          "is_arbitrary": false,
          "desc": [
            "Returns the largest number"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the first number to compare"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the second number to compare"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the largest number"
          },
          "examples": [
            "Math.max(5, 2);"
          ]
        },
        {
          "name": "min",
          "is_arbitrary": false,
          "desc": [
            "Returns the smallest number"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the first number to compare"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the second number to compare"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the smallest number"
          },
          "examples": [
            "Math.min(5, 2);"
          ]
        },
        {
          "name": "mod",
          "is_arbitrary": false,
          "desc": [
            "Returns the modulus of a division"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the number to divide"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the divisor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the modulus of the division"
          },
          "examples": [
            "Math.mod(5, 2);"
          ]
        },
        {
          "name": "rem",
          "is_arbitrary": false,
          "desc": [
            "Returns the remainder of a division"
          ],
          "params": [
            {
              "name": "num1",
              "type": "Number",
              "desc": "the number to divide"
            },
            {
              "name": "num2",
              "type": "Number",
              "desc": "the divisor"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the remainder of the division"
          },
          "examples": [
            "Math.rem(5, 2);"
          ]
        },
        {
          "name": "round",
          "is_arbitrary": false,
          "desc": [
            "Rounds a number to the nearest integer"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to round"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "Math.round(3.5);"
          ]
        },
        {
          "name": "sec",
          "is_arbitrary": false,
          "desc": [
            "Returns the secant of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the secant of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the secant of the number"
          },
          "examples": [
            "Math.sec(Math.pi);"
          ]
        },
        {
          "name": "signum",
          "is_arbitrary": false,
          "desc": [
            "Returns the sign of a number, 1 if the number is positive,",
            "-1 if the number is negative, and 0 if the number is 0"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the sign of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the sign of the number"
          },
          "examples": [
            "Math.signum(3);"
          ]
        },
        {
          "name": "sin",
          "is_arbitrary": false,
          "desc": [
            "Returns the sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the sine of the number"
          },
          "examples": [
            "Math.sin(Math.pi);"
          ]
        },
        {
          "name": "sinh",
          "is_arbitrary": false,
          "desc": [
            "Returns the hyperbolic sine of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the hyperbolic sine of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the hyperbolic sine of the number"
          },
          "examples": [
            "Math.sinh(1);"
          ]
        },
        {
          "name": "sqrt",
          "is_arbitrary": false,
          "desc": [
            "Returns the square root of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to square root"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the square root of the number"
          },
          "examples": [
            "Math.sqrt(9);"
          ]
        },
        {
          "name": "tan",
          "is_arbitrary": false,
          "desc": [
            "Returns the tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the tangent of the number"
          },
          "examples": [
            "Math.tan(Math.pi);"
          ]
        },
        {
          "name": "tanh",
          "is_arbitrary": false,
          "desc": [
            "Returns the hyperbolic tangent of a number"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to get the hyperbolic tangent of"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the hyperbolic tangent of the number"
          },
          "examples": [
            "Math.tanh(1);"
          ]
        },
        {
          "name": "toDegrees",
          "is_arbitrary": false,
          "desc": [
            "Converts a number from radians to degrees"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in degrees"
          },
          "examples": [
            "Math.toDegrees(Math.pi);"
          ]
        },
        {
          "name": "toRadians",
          "is_arbitrary": false,
          "desc": [
            "Converts a number from degrees to radians"
          ],
          "params": [
            {
              "name": "num",
              "type": "Number",
              "desc": "the number to convert"
            }
          ],
          "returns": {
            "type": "Number",
            "desc": "the number in radians"
          },
          "examples": [
            "Math.toRadians(90);"
          ]
        }
      ]
    },
    "Network": {
      "name": "Network",
      "desc": [
        "Allows you to do http requests. This is a utility class and cannot be constructed."
      ],
      "import_path": "util.Network",
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": [
        {
          "name": "downloadFile",
          "is_arbitrary": false,
          "desc": [
            "Downloads a file from an url to a file"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to download from"
            },
            {
              "name": "file",
              "type": "File",
              "desc": "the file to download to"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the download was successful"
          },
          "examples": [
            "Network.downloadFile('https://arucas.com', new File('dir/downloads'));"
          ]
        },
        {
          "name": "openUrl",
          "is_arbitrary": false,
          "desc": [
            "Opens an url in the default browser"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to open"
            }
          ],
          "examples": [
            "Network.openUrl('https://google.com');"
          ]
        },
        {
          "name": "requestUrl",
          "is_arbitrary": false,
          "desc": [
            "Requests an url and returns the response"
          ],
          "params": [
            {
              "name": "url",
              "type": "String",
              "desc": "the url to request"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the response from the url"
          },
          "examples": [
            "Network.requestUrl('https://google.com');"
          ]
        }
      ]
    },
    "Null": {
      "name": "Null",
      "desc": [
        "This class is used for the null object,",
        "this cannot be instantiated or extended"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [],
      "static_methods": []
    },
    "Number": {
      "name": "Number",
      "desc": [
        "This class cannot be constructed as it has a literal representation.",
        "For math related functions see the Math class."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "ceil",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number up to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.ceil();"
          ]
        },
        {
          "name": "floor",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number down to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.floor();"
          ]
        },
        {
          "name": "isInfinite",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if a number is infinite"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the number is infinite"
          },
          "examples": [
            "(1/0).isInfinite();"
          ]
        },
        {
          "name": "isNaN",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check if a number is not a number"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the number is not a number"
          },
          "examples": [
            "(0/0).isNaN();"
          ]
        },
        {
          "name": "round",
          "is_arbitrary": false,
          "desc": [
            "This allows you to round a number to the nearest integer"
          ],
          "returns": {
            "type": "Number",
            "desc": "the rounded number"
          },
          "examples": [
            "3.5.round();"
          ]
        }
      ],
      "static_methods": []
    },
    "Object": {
      "name": "Object",
      "desc": [
        "This is the base class for every other class in Arucas.",
        "This class cannot be instantiated from, you can extend it",
        "however every class already extends this class by default"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "copy",
          "is_arbitrary": false,
          "desc": [
            "This returns a copy of the value if implemented.",
            "Some objects that are immutable, such as Strings and Numbers",
            "will not be copied, and will return the same instance.",
            "Any object that has not implemented the copy method will also",
            "return the same instance"
          ],
          "returns": {
            "type": "Object",
            "desc": "a copy of the value"
          },
          "examples": [
            "[10, 11, 12].copy(); // [10, 11, 12]"
          ]
        },
        {
          "name": "hashCode",
          "is_arbitrary": false,
          "desc": [
            "This returns the hash code of the value, mainly used for maps and sets",
            "the hash code of an object must remain consistent for objects to be able",
            "to be used as keys in a map or set. If two objects are equal, they must",
            "have the same hash code"
          ],
          "returns": {
            "type": "Number",
            "desc": "the hash code of the value"
          },
          "examples": [
            "[10, 11, 12].hashCode(); // -1859087"
          ]
        },
        {
          "name": "instanceOf",
          "is_arbitrary": false,
          "desc": [
            "This returns true if the value is an instance of the given type"
          ],
          "params": [
            {
              "name": "type",
              "type": "Type",
              "desc": "the type to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the value is an instance of the given type"
          },
          "examples": [
            "[10, 11, 12].instanceOf(List.type); // true"
          ]
        },
        {
          "name": "toString",
          "is_arbitrary": false,
          "desc": [
            "This returns the string representation of the value"
          ],
          "returns": {
            "type": "String",
            "desc": "the string representation of the value"
          },
          "examples": [
            "[10, 11, 12].toString(); // [10, 11, 12]"
          ]
        },
        {
          "name": "uniqueHash",
          "is_arbitrary": false,
          "desc": [
            "This returns the unique hash of the value, this is different for every instance of a value"
          ],
          "returns": {
            "type": "Number",
            "desc": "the unique hash of the value"
          },
          "examples": [
            "'thing'.uniqueHash();"
          ]
        }
      ],
      "static_methods": []
    },
    "Set": {
      "name": "Set",
      "desc": [
        "Sets are collections of unique values. Similar to maps, without the values.",
        "An instance of the class can be created by using `Set.of(values...)`"
      ],
      "import_path": null,
      "superclass": "Collection",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates an empty set"
          ],
          "examples": [
            "new Set();"
          ]
        }
      ],
      "methods": [
        {
          "name": "add",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add a value to the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to add to the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value was successfully added to the set"
          },
          "examples": [
            "Set.of().add('object');"
          ]
        },
        {
          "name": "addAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to add all the values in a collection into the set"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to add"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the modified set"
          },
          "examples": [
            "Set.of().addAll(Set.of('object', 81, 96, 'case'));"
          ]
        },
        {
          "name": "clear",
          "is_arbitrary": false,
          "desc": [
            "This removes all values from inside the set"
          ],
          "examples": [
            "Set.of('object').clear();"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether a value is in the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value that you want to check in the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value is in the set"
          },
          "examples": [
            "Set.of('object').contains('object');"
          ]
        },
        {
          "name": "containsAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to check whether a collection of values are all in the set"
          ],
          "params": [
            {
              "name": "collection",
              "type": "Collection",
              "desc": "the collection of values you want to check in the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether all the values are in the set"
          },
          "examples": [
            "Set.of('object').containsAll(Set.of('object', 81, 96, 'case'));"
          ]
        },
        {
          "name": "filter",
          "is_arbitrary": false,
          "desc": [
            "This allows you to filter the set"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to filter the set by"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the filtered set"
          },
          "examples": [
            "Set.of(-9, 81, 96, 15).filter(fun(value) { return value > 80; });"
          ]
        },
        {
          "name": "get",
          "is_arbitrary": false,
          "desc": [
            "This allows you to get a value from in the set.",
            "The reason this might be useful is if you want to retrieve something",
            "from the set that will have the same hashcode but be in a different state",
            "as the value you are passing in"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get from the set"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the value you wanted to get, null if it wasn't in the set"
          },
          "examples": [
            "Set.of('object').get('object');"
          ]
        },
        {
          "name": "map",
          "is_arbitrary": false,
          "desc": [
            "This allows you to map the set"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to map the set by"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the mapped set"
          },
          "examples": [
            "Set.of(-9, 81, 96, 15).map(fun(value) { return value * 2; });"
          ]
        },
        {
          "name": "reduce",
          "is_arbitrary": false,
          "desc": [
            "This allows you to reduce the set"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to reduce the set by"
            }
          ],
          "returns": {
            "type": "Object",
            "desc": "the reduced set"
          },
          "examples": [
            "Set.of(-9, 81, 96, 15).reduce(fun(value, next) { return value + next; });"
          ]
        },
        {
          "name": "remove",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove a value from the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to remove from the set"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the value was removed from the set"
          },
          "examples": [
            "Set.of('object').remove('object');"
          ]
        },
        {
          "name": "removeAll",
          "is_arbitrary": false,
          "desc": [
            "This allows you to remove all values in a collection from the set"
          ],
          "params": [
            {
              "name": "value",
              "type": "Collection",
              "desc": "the values you want to remove from the set"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the set with the values removed"
          },
          "examples": [
            "Set.of('object', 'object').removeAll(Set.of('object'));"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "desc": [
            "This returns a list of all the values in the set"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of values in the set"
          },
          "examples": [
            "Set.of('object', 81, 96, 'case').toList();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": true,
          "desc": [
            "This allows you to create a set with an arbitrary number of values"
          ],
          "params": [
            {
              "name": "values...",
              "type": "Object",
              "desc": "the values you want to add to the set"
            }
          ],
          "returns": {
            "type": "Set",
            "desc": "the set you created"
          },
          "examples": [
            "Set.of('object', 81, 96, 'case');"
          ]
        },
        {
          "name": "unordered",
          "is_arbitrary": false,
          "desc": [
            "This creates an unordered set"
          ],
          "returns": {
            "type": "Set",
            "desc": "the unordered set"
          },
          "examples": [
            "Set.unordered();"
          ]
        }
      ]
    },
    "String": {
      "name": "String",
      "desc": [
        "This class represents an array of characters to form a string.",
        "This class cannot be instantiated directly, instead use the literal",
        "by using quotes. Strings are immutable in Arucas."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new string object, not from the string pool, with the given string.",
            "This cannot be called directly, only from child classes"
          ],
          "examples": [
            "class ChildString: String {\n    ChildString(): super(\"example\");\n}"
          ]
        }
      ],
      "methods": [
        {
          "name": "capitalize",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in capitalized form"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in capitalized form"
          },
          "examples": [
            "'hello'.capitalize(); // 'Hello'"
          ]
        },
        {
          "name": "chars",
          "is_arbitrary": false,
          "desc": [
            "This makes a list of all the characters in the string"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of characters"
          },
          "examples": [
            "'hello'.chars(); // ['h', 'e', 'l', 'l', 'o']"
          ]
        },
        {
          "name": "contains",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string contains the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string contains the given string"
          },
          "examples": [
            "'hello'.contains('lo'); // true"
          ]
        },
        {
          "name": "endsWith",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string ends with the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string ends with the given string"
          },
          "examples": [
            "'hello'.endsWith('lo'); // true"
          ]
        },
        {
          "name": "find",
          "is_arbitrary": false,
          "desc": [
            "This finds all matches of the regex in the string,",
            "this does not find groups, for that use `<String>.findGroups(regex)`"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to search the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of all instances of the regex in the string"
          },
          "examples": [
            "'102i 1i'.find('([\\\\d+])i'); // ['2i', '1i']"
          ]
        },
        {
          "name": "findAll",
          "is_arbitrary": false,
          "desc": [
            "This finds all matches and groups of a regex in the matches in the string",
            "the first group of each match will be the complete match and following",
            "will be the groups of the regex, a group may be empty if it doesn't exist"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to search the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "a list of match groups, which is a list containing matches"
          },
          "examples": [
            "'102i 1i'.findAll('([\\\\d+])i'); // [['2i', '2'], ['1i', '1']]"
          ]
        },
        {
          "name": "format",
          "is_arbitrary": true,
          "desc": [
            "This formats the string using the given arguments.",
            "This internally uses the Java String.format() method.",
            "For how to use see here: https://www.javatpoint.com/java-string-format"
          ],
          "params": [
            {
              "name": "objects...",
              "type": "Object",
              "desc": "the objects to insert"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the formatted string"
          },
          "examples": [
            "'%s %s'.format('hello', 'world'); // 'hello world'"
          ]
        },
        {
          "name": "length",
          "is_arbitrary": false,
          "desc": [
            "This returns the length of the string"
          ],
          "returns": {
            "type": "Number",
            "desc": "the length of the string"
          },
          "examples": [
            "'hello'.length(); // 5"
          ]
        },
        {
          "name": "lowercase",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in lowercase"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in lowercase"
          },
          "examples": [
            "'HELLO'.lowercase(); // 'hello'"
          ]
        },
        {
          "name": "matches",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string matches the given regex"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to match the string with"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string matches the given regex"
          },
          "examples": [
            "'foo'.matches('f.*'); // true"
          ]
        },
        {
          "name": "replaceAll",
          "is_arbitrary": false,
          "desc": [
            "This replaces all the instances of a regex with the replace string"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex you want to replace"
            },
            {
              "name": "replacement",
              "type": "String",
              "desc": "the string you want to replace it with"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the modified string"
          },
          "examples": [
            "'hello'.replaceAll('l', 'x'); // 'hexxo'"
          ]
        },
        {
          "name": "replaceFirst",
          "is_arbitrary": false,
          "desc": [
            "This replaces the first instance of a regex with the replace string"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex you want to replace"
            },
            {
              "name": "replacement",
              "type": "String",
              "desc": "the string you want to replace it with"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the modified string"
          },
          "examples": [
            "'hello'.replaceFirst('l', 'x'); // 'hexlo'"
          ]
        },
        {
          "name": "reverse",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in reverse"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in reverse"
          },
          "examples": [
            "'hello'.reverse(); // 'olleh'"
          ]
        },
        {
          "name": "split",
          "is_arbitrary": false,
          "desc": [
            "This splits the string into a list of strings based on a regex"
          ],
          "params": [
            {
              "name": "regex",
              "type": "String",
              "desc": "the regex to split the string with"
            }
          ],
          "returns": {
            "type": "List",
            "desc": "the list of strings"
          },
          "examples": [
            "'foo/bar/baz'.split('/');"
          ]
        },
        {
          "name": "startsWith",
          "is_arbitrary": false,
          "desc": [
            "This returns whether the string starts with the given string"
          ],
          "params": [
            {
              "name": "string",
              "type": "String",
              "desc": "the string to check"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the string starts with the given string"
          },
          "examples": [
            "'hello'.startsWith('he'); // true"
          ]
        },
        {
          "name": "strip",
          "is_arbitrary": false,
          "desc": [
            "This strips the whitespace from the string"
          ],
          "returns": {
            "type": "String",
            "desc": "the stripped string"
          },
          "examples": [
            "'  hello  '.strip(); // 'hello'"
          ]
        },
        {
          "name": "subString",
          "is_arbitrary": false,
          "desc": [
            "This returns a substring of the string"
          ],
          "params": [
            {
              "name": "from",
              "type": "Number",
              "desc": "the start index (inclusive)"
            },
            {
              "name": "to",
              "type": "Number",
              "desc": "the end index (exclusive)"
            }
          ],
          "returns": {
            "type": "String",
            "desc": "the substring"
          },
          "examples": [
            "'hello'.subString(1, 3); // 'el'"
          ]
        },
        {
          "name": "toList",
          "is_arbitrary": false,
          "deprecated": [
            "Use '<String>.chars()' instead"
          ],
          "desc": [
            "This makes a list of all the characters in the string"
          ],
          "returns": {
            "type": "List",
            "desc": "the list of characters"
          },
          "examples": [
            "'hello'.toList(); // ['h', 'e', 'l', 'l', 'o']"
          ]
        },
        {
          "name": "toNumber",
          "is_arbitrary": false,
          "desc": [
            "This tries to convert the string to a number.",
            "This method can convert hex or denary into numbers.",
            "If the string is not a number, it will throw an error"
          ],
          "returns": {
            "type": "Number",
            "desc": "the number"
          },
          "examples": [
            "'99'.toNumber(); // 99"
          ]
        },
        {
          "name": "uppercase",
          "is_arbitrary": false,
          "desc": [
            "This returns the string in uppercase"
          ],
          "returns": {
            "type": "String",
            "desc": "the string in uppercase"
          },
          "examples": [
            "'hello'.uppercase(); // 'HELLO'"
          ]
        }
      ],
      "static_methods": []
    },
    "Task": {
      "name": "Task",
      "desc": [
        "This class is used to create tasks that can be chained and",
        "run asynchronously. Tasks can be executed as many times as needed",
        "and chained tasks will be executed in the order they are created."
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [
        {
          "desc": [
            "This creates a new empty task"
          ],
          "examples": [
            "task = new Task();"
          ]
        }
      ],
      "methods": [
        {
          "name": "loopIf",
          "is_arbitrary": false,
          "desc": [
            "This loops the task, essentially just calling 'task.run', the",
            "task will run async from the original task, the loop will continue",
            "if the function provided returns true"
          ],
          "params": [
            {
              "name": "boolSupplier",
              "type": "Function",
              "desc": "the function to check if the loop should run"
            }
          ],
          "returns": {
            "type": "Task",
            "desc": "the task, this allows for chaining"
          },
          "examples": [
            "task = new Task()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .loopIf(fun() true); // Always loop"
          ]
        },
        {
          "name": "run",
          "is_arbitrary": false,
          "desc": [
            "This runs the task asynchronously and returns a future which can be awaited.",
            "The last function in the task will be used as the return value for the future"
          ],
          "returns": {
            "type": "Future",
            "desc": "the future value that can be awaited"
          },
          "examples": [
            "task = new Task()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .then(fun() 10);\nf = task.run(); // prints 'hello world'\nprint(f.await()); // prints 10"
          ]
        },
        {
          "name": "then",
          "is_arbitrary": false,
          "desc": [
            "This adds a function to the end of the current task.",
            "If this is the last function in the task then the return",
            "value of the function will be the return value of the task."
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function to run at the end of the task"
            }
          ],
          "returns": {
            "type": "Task",
            "desc": "the task, this allows for chaining"
          },
          "examples": [
            "task = new Task()\n    .then(fun() print(\"hello\"))\n    .then(fun() print(\" \"))\n    .then(fun() print(\"world\"))\n    .then(fun() 10);\nf = task.run(); // prints 'hello world'\nprint(f.await()); // prints 10"
          ]
        }
      ],
      "static_methods": []
    },
    "Thread": {
      "name": "Thread",
      "desc": [
        "This class allows to to create threads for async executions.",
        "This class cannot be instantiated or extended. To create a new",
        "thread use the static method 'Thread.runThreaded()'"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "freeze",
          "is_arbitrary": false,
          "desc": [
            "This serves the same purpose as 'Thread.freeze()' however this works on the current",
            "thread instance, unlike 'Thread.freeze()' this cannot throw an error."
          ],
          "examples": [
            "Thread.getCurrentThread().freeze()"
          ]
        },
        {
          "name": "getAge",
          "is_arbitrary": false,
          "desc": [
            "This gets the age of the thread in milliseconds"
          ],
          "returns": {
            "type": "Number",
            "desc": "the age of the thread"
          },
          "examples": [
            "Thread.getCurrentThread().getAge();"
          ]
        },
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the thread"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the thread"
          },
          "examples": [
            "Thread.getCurrentThread().getName();"
          ]
        },
        {
          "name": "isAlive",
          "is_arbitrary": false,
          "desc": [
            "This checks if the thread is alive (still running)"
          ],
          "returns": {
            "type": "Boolean",
            "desc": "true if the thread is alive, false if not"
          },
          "examples": [
            "Thread.getCurrentThread().isAlive();"
          ]
        },
        {
          "name": "stop",
          "is_arbitrary": false,
          "desc": [
            "This stops the thread from executing, anything that was running will be instantly stopped.",
            "This method will fail if the thread is not alive"
          ],
          "examples": [
            "Thread.getCurrentThread().stop();"
          ]
        },
        {
          "name": "thaw",
          "is_arbitrary": false,
          "desc": [
            "This will thaw the thread from its frozen state, if the thread is not frozen then an",
            "error will be thrown"
          ],
          "examples": [
            "Thread.getCurrentThread().thaw();"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "freeze",
          "is_arbitrary": false,
          "desc": [
            "This freezes the current thread, stops anything else from executing on the thread.",
            "This may fail if you try to freeze a non Arucas Thread in which case an error will be thrown"
          ],
          "examples": [
            "Thread.freeze();"
          ]
        },
        {
          "name": "getCurrentThread",
          "is_arbitrary": false,
          "desc": [
            "This gets the current thread that the code is running on,",
            "this may throw an error if the thread is not safe to get,",
            "which happens when running outside of Arucas Threads"
          ],
          "returns": {
            "type": "Thread",
            "desc": "the current thread"
          },
          "examples": [
            "Thread.getCurrentThread();"
          ]
        },
        {
          "name": "runThreaded",
          "is_arbitrary": false,
          "desc": [
            "This starts a new thread and runs a function on it, the thread will",
            "terminate when it finishes executing the function, threads will stop automatically",
            "when the program stops, you are also able to stop threads by using the Thread object"
          ],
          "params": [
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to run on a new thread"
            }
          ],
          "returns": {
            "type": "Thread",
            "desc": "the new thread"
          },
          "examples": [
            "Thread.runThreaded(fun() {\n    print(\"Running asynchronously!\");\n});"
          ]
        },
        {
          "name": "runThreaded",
          "is_arbitrary": false,
          "desc": [
            "This starts a new thread with a specific name and runs a function on it"
          ],
          "params": [
            {
              "name": "name",
              "type": "String",
              "desc": "the name of the thread"
            },
            {
              "name": "function",
              "type": "Function",
              "desc": "the function you want to run on a new thread"
            }
          ],
          "returns": {
            "type": "Thread",
            "desc": "the new thread"
          },
          "examples": [
            "Thread.runThreaded(\"MyThread\", fun() {\n    print(\"Running asynchronously on MyThread\");\n});"
          ]
        }
      ]
    },
    "Type": {
      "name": "Type",
      "desc": [
        "This class lets you get the type of another class"
      ],
      "import_path": null,
      "superclass": "Object",
      "static_members": [],
      "constructors": [],
      "methods": [
        {
          "name": "getName",
          "is_arbitrary": false,
          "desc": [
            "This gets the name of the type"
          ],
          "returns": {
            "type": "String",
            "desc": "the name of the type"
          },
          "examples": [
            "String.type.getName();"
          ]
        },
        {
          "name": "inheritsFrom",
          "is_arbitrary": false,
          "desc": [
            "This checks whether a type is a subtype of another type"
          ],
          "params": [
            {
              "name": "type",
              "type": "Type",
              "desc": "the other type you want to check against"
            }
          ],
          "returns": {
            "type": "Boolean",
            "desc": "whether the type is of that type"
          },
          "examples": [
            "String.type.inheritsFrom(Number.type);"
          ]
        }
      ],
      "static_methods": [
        {
          "name": "of",
          "is_arbitrary": false,
          "desc": [
            "This gets the specific type of a value"
          ],
          "params": [
            {
              "name": "value",
              "type": "Object",
              "desc": "the value you want to get the type of"
            }
          ],
          "returns": {
            "type": "Type",
            "desc": "the type of the value"
          },
          "examples": [
            "Type.of(0);"
          ]
        }
      ]
    }
  }
}